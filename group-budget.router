const express = require('express');
const router = express.Router();
const groupBudgetController = require('../grp_expenses/group-budget.controller');
const { checkToken } = require('../../auth/token_validation');
const groupAuth = require('../../auth/groupAuth');
const pool = require('../../config/database');

router.use(checkToken);
// Budget routes
router.route('/groups/:groupId/budget')
  .get(groupAuth('member'), groupBudgetController.getBudget) // Get budget
  .post(groupAuth('admin'), groupBudgetController.addBudget) // Add budget
  .put(groupAuth('admin'), groupBudgetController.updateBudget) // Update budget
  
router.get('/groups/:groupId/budgets', 
  checkToken, 
  groupAuth('member'), 
  groupBudgetController.getBudgetsByGroup
);

router.put('/groups/:groupId/members/:memberId/promote',
  checkToken, 
  groupAuth('admin'), 
  async (req, res) => {
    let connection;
    try {
      connection = await pool.getConnection();
      const { groupId, memberId } = req.params;
      
      // 1. First verify the member exists and is not already an admin
      const [memberCheck] = await connection.query(
        'SELECT role FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, memberId]
      );
      
      if (memberCheck.length === 0) {
        return res.status(404).json({
          success: 0,
          message: "Member not found in this group"
        });
      }
      
      if (memberCheck[0].role === 'admin') {
        return res.status(400).json({
          success: 0,
          message: "Member is already an admin"
        });
      }
      
      await connection.query(
        `UPDATE group_members 
         SET role = 'admin' 
         WHERE group_id = ? AND user_id = ?`,
        [groupId, memberId]
      );

      const [updatedMember] = await connection.query(
        `SELECT user_id as id, username, email, role 
         FROM group_members 
         JOIN users ON group_members.user_id = users.id
         WHERE group_id = ? AND user_id = ?`,
        [groupId, memberId]
      );
      
      return res.json({
        success: 1,
        message: "Member promoted to admin successfully",
        data: updatedMember[0]
      });
    } catch (err) {
      console.error('Promote member error:', err);
      return res.status(500).json({
        success: 0,
        message: "Failed to promote member"
      });
    } finally {
      if (connection) connection.release();
    }
  }
);

  router.delete('/groups/:groupId/leave', 
  checkToken,
  groupAuth('member'),
  async (req, res) => {
    let connection;
    try {
      connection = await pool.getConnection();
      const userId = req.user.userId;
      const groupId = req.params.groupId;

      // Check if user is the last admin
      const [admins] = await connection.query(
        'SELECT user_id FROM group_members WHERE group_id = ? AND role = "admin"',
        [groupId]
      );

      const [userRole] = await connection.query(
        'SELECT role FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, userId]
      );

      // Prevent last admin from leaving without transferring admin rights
      if (userRole[0].role === 'admin' && admins.length === 1) {
        return res.status(400).json({
          success: 0,
          message: "You are the last admin. Please assign another admin before leaving."
        });
      }

      // Remove member from group
      await connection.query(
        'DELETE FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, userId]
      );

      return res.json({
        success: 1,
        message: "You have left the group successfully"
      });
    } catch (err) {
      console.error('Leave group error:', err);
      return res.status(500).json({
        success: 0,
        message: "Failed to leave group"
      });
    } finally {
      if (connection) connection.release();
    }
  }
);

router.route('/groups/:groupId/contributions')
  .get(groupAuth('member'), async (req, res) => {
    try {
      const { groupId } = req.params;
      
      // Validate group exists
      const [group] = await pool.query('SELECT id FROM groups WHERE id = ?', [groupId]);
      if (!group.length) {
        return res.status(404).json({ success: 0, message: 'Group not found' });
      }
      
      const [contributions] = await pool.query(
        `SELECT 
          c.id,
          c.user_id,
          u.username,
          c.amount,
          c.created_at as date,
          c.status
         FROM contributions c
         JOIN users u ON c.user_id = u.id
         WHERE c.group_id = ?
         ORDER BY c.created_at DESC`,
        [groupId]
      );

      return res.json({ success: 1, contributions });
    } catch (err) {
      console.error('Error fetching contributions:', err);
      return res.status(500).json({ success: 0, message: 'Failed to fetch contributions' });
    }
  })
  .post(groupAuth('member'), async (req, res) => {
    try {
      const { groupId } = req.params;
      const { amount, user_id } = req.body;

      // Validate input
      if (!amount || isNaN(amount)) {
        return res.status(400).json({ success: 0, message: 'Invalid amount' });
      }

      // Validate user exists and is member of group
      const [membership] = await pool.query(
        'SELECT 1 FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, user_id]
      );
      
      if (!membership.length) {
        return res.status(403).json({ success: 0, message: 'User is not a member of this group' });
      }

      await pool.query(
        'INSERT INTO contributions (group_id, user_id, amount, status) VALUES (?, ?, ?, ?)',
        [groupId, user_id, amount, 'completed']
      );

      return res.json({ success: 1, message: 'Contribution saved successfully' });
    } catch (err) {
      console.error('Error saving contribution:', err);
      return res.status(500).json({ success: 0, message: 'Failed to save contribution' });
    }
  });

  router.get('/groups/:groupId/contributions', groupAuth('member'), async (req, res) => {
    try {
      const { groupId } = req.params;
      console.log(`Fetching contributions for group ${groupId}`); 
      // Verify group exists
      const [group] = await pool.query('SELECT id FROM groups WHERE id = ?', [groupId]);
    if (!group.length) {
      return res.status(404).json({ success: 0, message: 'Group not found' });
    }

    const [contributions] = await pool.query(
      `SELECT 
        c.id,
        c.user_id,
        u.username,
        c.amount,
        DATE_FORMAT(c.created_at, '%Y-%m-%d') as date,
        c.status,
        c.group_id  // Make sure this is included
       FROM contributions c
       JOIN users u ON c.user_id = u.id
       WHERE c.group_id = ?
       ORDER BY c.created_at DESC`,
      [groupId]
    );

    console.log(`Found ${contributions.length} contributions for group ${groupId}`);
    console.log('Sample contribution:', contributions[0]); // Log first contribution if exists

    return res.json({ 
      success: 1, 
      contributions,
      groupId: parseInt(groupId) // Ensure this is a number
    });
  } catch (err) {
    console.error('Error fetching contributions:', err);
    return res.status(500).json({ success: 0, message: 'Failed to fetch contributions' });
  }
});

  router.get('/groups/:groupId/contribution-history', groupAuth('member'), async (req, res) => {
    try {
      const { groupId } = req.params;
      const { user_id } = req.query;

      if (!user_id) {
        return res.status(400).json({ success: 0, message: 'User ID is required' });
      }

      const [membership] = await pool.query(
        'SELECT 1 FROM group_members WHERE group_id = ? AND user_id = ?',
        [groupId, user_id]
      );
      
      if (!membership.length) {
        return res.status(403).json({ success: 0, message: 'User is not a member of this group' });
      }

      const [history] = await pool.query(
        `SELECT 
          id,
          amount, 
          DATE_FORMAT(created_at, '%Y-%m-%d %H:%i:%s') as date,
          status 
         FROM contributions 
         WHERE group_id = ? AND user_id = ?
         ORDER BY created_at DESC`,
        [groupId, user_id]  // Both group and user filters
      );

    return res.json({ success: 1, history });
  } catch (err) {
    console.error('Error fetching contribution history:', err);
    return res.status(500).json({ success: 0, message: 'Failed to fetch contribution history' });
  }
});

router.post('/groups/:groupId/contributions', groupAuth('member'), async (req, res) => {
  try {
    const { groupId } = req.params;
    const { amount, user_id } = req.body;

    // Validate input
    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ success: 0, message: 'Invalid amount' });
    }

    // Validate user exists and is member of group
    const [membership] = await pool.query(
      'SELECT 1 FROM group_members WHERE group_id = ? AND user_id = ?',
      [groupId, user_id]
    );
    
    if (!membership.length) {
      return res.status(403).json({ success: 0, message: 'User is not a member of this group' });
    }

    // Start transaction
    await pool.query('START TRANSACTION');

    // Insert contribution
    const [result] = await pool.query(
      'INSERT INTO contributions (group_id, user_id, amount, status) VALUES (?, ?, ?, ?)',
      [groupId, user_id, amount, 'completed']
    );

    const [newContribution] = await pool.query(
      `SELECT 
        c.id,
        c.user_id,
        u.username,
        c.amount,
        DATE_FORMAT(c.created_at, '%Y-%m-%d %H:%i:%s') as date,
        c.status
       FROM contributions c
       JOIN users u ON c.user_id = u.id
       WHERE c.id = ?`,
      [result.insertId]
    );

    await pool.query('COMMIT');

    return res.json({ 
      success: 1, 
      message: 'Contribution added successfully',
      contributionId: result.insertId 
    });
  } catch (err) {
    // Rollback on error
    await pool.query('ROLLBACK');
    console.error('Error adding contribution:', err);
    return res.status(500).json({ success: 0, message: 'Failed to add contribution' });
  }
});

router.put('/groups/:groupId/contributions/:contributionId', groupAuth('member'), async (req, res) => {
  let connection;
  try {
    const { groupId, contributionId } = req.params;
    const { amount } = req.body;

    // Validate input
    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ 
        success: 0, 
        message: 'Invalid amount - must be a positive number' 
      });
    }

    connection = await pool.getConnection();
    await connection.query('START TRANSACTION');

    // Verify the contribution exists and belongs to this group
    const [contribution] = await connection.query(
      'SELECT id, user_id FROM contributions WHERE id = ? AND group_id = ? FOR UPDATE',
      [contributionId, groupId]
    );

    if (!contribution.length) {
      await connection.query('ROLLBACK');
      return res.status(404).json({ 
        success: 0, 
        message: 'Contribution not found in this group' 
      });
    }

    // Check if current user owns this contribution
    if (contribution[0].user_id !== req.user.userId) {
      await connection.query('ROLLBACK');
      return res.status(403).json({ 
        success: 0, 
        message: 'You can only edit your own contributions' 
      });
    }

    // Update the contribution
    await connection.query(
      'UPDATE contributions SET amount = ? WHERE id = ?',
      [amount, contributionId]
    );

    await connection.query('COMMIT');

    return res.json({ 
      success: 1, 
      message: 'Contribution updated successfully',
      data: {
        id: contributionId,
        amount: parseFloat(amount)
      }
    });
  } catch (err) {
    if (connection) await connection.query('ROLLBACK');
    console.error('Error updating contribution:', err);
    return res.status(500).json({ 
      success: 0, 
      message: 'Failed to update contribution',
      error: err.message 
    });
  } finally {
    if (connection) connection.release();
  }
});
module.exports = router;
