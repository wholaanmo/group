const pool = require('../../config/database');  // Assuming this is the correct path to your DB connection

module.exports = {
  addBudget: async (data) => {
    try {
      // Check if budget already exists for this group
      const existing = await pool.query(
        'SELECT id FROM group_budgets WHERE group_id = ?',
        [data.groupId]
      );
      
      if (existing[0].length > 0) {
        throw new Error('This group already has a budget');
      }
  
      const [result] = await pool.query(
        `INSERT INTO group_budgets 
         (group_id, user_id, budget_amount, budget_name, created_at)
         VALUES (?, ?, ?, ?, NOW())`,
        [
          data.groupId, 
          data.userId || null, // Accept NULL user_id
          data.budgetAmount, 
          data.budgetName || 'Group Budget'
        ]
      );
      
      return result[0];
    } catch (err) {
      throw err;
    }
  },

  updateBudget: async (data) => {
    try {
      await pool.query(
        `UPDATE group_budgets 
         SET budget_amount = ?, budget_name = ?, updated_at = NOW()
         WHERE group_id = ?`,
        [data.budgetAmount, data.budgetName || 'Group Budget', data.groupId]
      );
      
      // Return the updated budget data
      const [updated] = await pool.query(
        `SELECT * FROM group_budgets WHERE group_id = ?`,
        [data.groupId]
      );
      return updated[0];
    } catch (err) {
      throw err;
    }
  },

  getBudgetByGroupId: async (groupId) => {
    try {
      const [results] = await pool.query(
        `SELECT * FROM group_budgets WHERE group_id = ?`,
        [groupId]
      );
      return results[0] || null;
    } catch (err) {
      throw err;
    }
  },

  deleteBudget: async (groupId) => {
    try {
      const [results] = await pool.query(
        `DELETE FROM group_budgets WHERE group_id = ?`,
        [groupId]
      );
      return results;
    } catch (err) {
      throw err;
    }
  },

  checkBudgetExists: async (groupId) => {
    try {
      const [results] = await pool.query(
        `SELECT id FROM group_budgets WHERE group_id = ?`,
        [groupId]
      );
      return results.length > 0;
    } catch (err) {
      throw err;
    }
  },

  getBudgetsByGroup: async (groupId) => {
    try {
      const [results] = await pool.query(
        `SELECT id, group_id, budget_amount, budget_name, created_at 
         FROM group_budgets 
         WHERE group_id = ?`,
        [groupId]
      );
      return results;
    } catch (err) {
      throw err;
    }
  },

  getAllBudgets: async () => {
    try {
      const [results] = await pool.query(
        `SELECT id, group_id, budget_amount, budget_name, created_at FROM group_budgets`
      );
      return results;
    } catch (err) {
      throw err;
    }
  }
};
