const { blacklistToken } = require("../../auth/token_validation");

const { 
    create, 
    getUserByUserId, 
    getUsers, 
    updateUser, 
    deleteUser, 
    getUserByUserEmail,
    checkUsernameExists,
    checkEmailExists,
    updateLoginInfo,
    invalidateToken 
} = require ("../users/user.service");

const {genSaltSync, hashSync, compareSync } = require("bcrypt");
const { sign } = require ("jsonwebtoken");
const pool = require("../../config/database");

module.exports = {
    createUser: async (req, res) => {
        try {
        const body = req.body;

        const usernameExists = await checkUsernameExists(body.username);
        if (usernameExists) {
            return res.status(400).json({
                success: 0,
                message: "Username already exists"
            });
        }
        
        const emailExists = await checkEmailExists(body.email);
        if (emailExists) {
            return res.status(400).json({
                success: 0,
                message: "Email already exists"
            });
        }

        const salt = genSaltSync(10);
        body.password = hashSync(body.password, salt);
        body.registration_date = new Date();

        const results = await create(body);
            
         return res.status(200).json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        // Handle specific error messages from service
        if (err.message === 'Username already exists' || err.message === 'Email already exists') {
            return res.status(400).json({
                success: 0,
                message: err.message
            });
        }
        return res.status(500).json({
            success: 0,
            message: "Database connection error"
        });
    }
},

getUserByUserId: async (req, res) => {
    try {
        const id = req.params.id;
        const results = await getUserByUserId(id);
        
        if (!results) {
            return res.json({
                success: 0,
                message: "Record not Found"
            });
        }
        
        return res.json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
getUsers: async (req, res) => {
    try {
        const results = await getUsers();
        return res.json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},

updateUsers: async (req, res) => {
    try {
        const body = req.body;

        const [existingUsername] = await pool.execute(
            'SELECT id FROM users WHERE username = ? AND id != ?',
            [body.username, body.id]
        );
        if (existingUsername.length > 0) {
            return res.status(400).json({
                success: 0,
                message: "Username already taken by another user"
            });
        }
        
        const [existingEmail] = await pool.execute(
            'SELECT id FROM users WHERE email = ? AND id != ?',
            [body.email, body.id]
        );
        if (existingEmail.length > 0) {
            return res.status(400).json({
                success: 0,
                message: "Email already taken by another user"
            });
        }

        if (body.password) {
            const salt = genSaltSync(10);
            body.password = hashSync(body.password, salt);
        }
        
        const results = await updateUser(body);
        
        if (!results || results.affectedRows === 0) {
            return res.json({
                success: 0,
                message: "Failed to update user or user not found"
            });
        }
        
        return res.json({
            success: 1,
            message: "Updated successfully"
        });
    } catch (err) {
        console.error(err);
        // Handle specific error messages from service
        if (err.message.includes('already taken')) {
            return res.status(400).json({
                success: 0,
                message: err.message
            });
        }
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},

deleteUser: async (req, res) => {
    try {
        const id = req.params.id;
        const results = await deleteUser(id);
        
        if (!results || results.affectedRows === 0) {
            return res.json({
                success: 0,
                message: "User not Found"
            });
        }
        
        return res.json({
            success: 1,
            message: "User deleted successfully"
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
login: async (req, res) => {
    try {
        const body = req.body;
        const results = await getUserByUserEmail(body.email);
        
        if (!results) {
            return res.json({
                success: 0,
                message: "Invalid email or password"
            });
        }
        
        const isPasswordValid = compareSync(body.password, results.password);
        if (isPasswordValid) {
            const isFirstLogin = await updateLoginInfo(results.id);

            await pool.execute(
                'UPDATE users SET token_valid = TRUE WHERE id = ?',
                [results.id]
            );

            results.password = undefined;
            const jsontoken = sign({ userId: results.id }, "qwe1234", {
                expiresIn: "5h",
            });
            
            return res.json({
                success: 1,
                message: "Login successful",
                token: jsontoken,
                user: {
                    id: results.id,
                    username: results.username, 
                    email: results.email
                },
                isFirstLogin: isFirstLogin
            });
        } else {
            return res.json({
                success: 0,
                message: "Invalid email or password"
            });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
logout: async (req, res) => {
    try {
        const userId = req.user.userId; // From decoded token
        await invalidateToken(userId);
        
        return res.json({
            success: 1,
            message: "Logout successful"
        });
    } catch (err) {
        console.error('Logout error:', err);
        return res.json({
            success: 0,
            message: "Logout failed"
        });
    }
}
};
